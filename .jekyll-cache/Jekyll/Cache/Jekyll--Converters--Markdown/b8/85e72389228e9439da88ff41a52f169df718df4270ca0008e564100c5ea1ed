I"è(<p>This article explains how to create a_one-hot encoding_ of categorical values using PyTorch library. The idea of this post is inspired by ‚Äú<a href="https://www.manning.com/books/deep-learning-with-pytorch?query=deep%20lea"><em>Deep Learning with PyTorch</em></a>‚Äù by Eli Stevens, Luca Antiga, and Thomas Viehmann.</p>

<p>Sooner or later everyone meets categorical values in one‚Äôs dataset. For example, the size of a t-shirt which ranges from <em>small</em> (S), <em>medium</em> (M), <em>large</em> (L), and  <em>extra large</em> (XL), has four categorical values. Next, the question will be</p>

<blockquote>
  <p>How do we encode these categorical values before we feed them into Machine Learning algorithms?</p>
</blockquote>

<p>Suppose that we have installed <a href="https://pytorch.org"><strong>PyTorch</strong></a> in our machine and as an example, we use the <a href="https://maranathaedu-my.sharepoint.com/:x:/g/personal/hendra_bunyamin_it_maranatha_edu/ERfx1C28MeFEuKuNY1ptbKMBEjOFOwxaqfnQIeXYyOF9ww?e=BSnKsb"><em>train set</em></a> of Titanic dataset.</p>

<p><a href="/assets/images/Titanic-Sinking.jpg"><img src="/assets/images/Titanic-Sinking.jpg" alt="img1" class="img-responsive" /></a><em><center>The RMS Titanic sank in the North Atlantic Ocean in the early morning hours of 15 April 1912. Image taken from <a href="https://www.greenscene.co.id/2020/06/25/7-kejadian-nyata-di-titanic-yang-berbeda-dengan-filmnya/">Greenscene</a>, some rights reserved.</center></em></p>

<p>Let‚Äôs get started by reading the train set.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">torch</span>
<span class="n">torch</span><span class="o">.</span><span class="n">set_printoptions</span><span class="p">(</span><span class="n">edgeitems</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">precision</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">75</span><span class="p">)</span>

<span class="c1"># This is the path to our train set. You might modify it accordingly.
</span><span class="n">TITANIC_DATASET</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span> <span class="s">'/home/hbunyamin/Perkuliahan/Pembelajaran-Mesin-Maranatha/projects/UTS/Titanic'</span> <span class="p">)</span> 
<span class="n">titanic_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span> <span class="n">TITANIC_DATASET</span> <span class="o">/</span> <span class="s">'train.csv'</span> <span class="p">)</span> 
</code></pre></div></div>
<p><br />
Next, we show several rows from the dataframe.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">titanic_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>
<p>Out:
<a href="/assets/images/titanic-head.png"><img src="/assets/images/titanic-head.png" alt="img1" class="img-responsive" /></a>
<br />
We also show the statistics of the Titanic train as follows:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">titanic_df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></div></div>
<p>Out:
<a href="/assets/images/titanic-df-describe.png"><img src="/assets/images/titanic-df-describe.png" alt="img1" class="img-responsive" /></a>
<br />
We are interested in making the passenger classes (<code class="highlighter-rouge">Pclass</code>) column into a one-hot encoding. Let‚Äôs show each value and its frequency inside <code class="highlighter-rouge">Pclass</code> column.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">titanic_df</span><span class="p">[</span><span class="s">'Pclass'</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div></div>
<p>Out:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3    491
1    216
2    184
Name: Pclass, dtype: int64
</code></pre></div></div>
<p>The number of occurrences in the dataset for value <code class="highlighter-rouge">3</code>, <code class="highlighter-rouge">1</code>, and <code class="highlighter-rouge">2</code> are <code class="highlighter-rouge">491</code>, <code class="highlighter-rouge">216</code>, and <code class="highlighter-rouge">184</code> respectively.</p>

<p>Next, we convert <code class="highlighter-rouge">1</code>, <code class="highlighter-rouge">2</code> , and <code class="highlighter-rouge">3</code> into a one-hot encoding. Since indices in PyTorch starts from <code class="highlighter-rouge">0</code>and the values of <code class="highlighter-rouge">Pclass</code> column start from <code class="highlighter-rouge">1</code>, we need to make an adjustment. Let‚Äôs subtract <code class="highlighter-rouge">1</code> from each value in <code class="highlighter-rouge">Pclass</code> column and view the values.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pclass</span> <span class="o">=</span> <span class="n">titanic_df</span><span class="p">[</span><span class="s">'Pclass'</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span>
<span class="n">pclass</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span>
</code></pre></div></div>
<p>Out:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([2, 0, 1])
</code></pre></div></div>
<p><br />
Subsequently, we convert the <code class="highlighter-rouge">pclass</code> into a tensor.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pclass</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">pclass</span><span class="p">)</span>
<span class="n">pclass</span><span class="o">.</span><span class="n">shape</span>
</code></pre></div></div>
<p>Out:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>torch.Size([891])
</code></pre></div></div>
<p><br />
Now we are ready to convert</p>

<script type="math/tex; mode=display">\begin{equation} \texttt{0} \Rightarrow \begin{bmatrix} 1 \\ 
0  \\ 
0 \\ \end{bmatrix}, \; \texttt{1} \Rightarrow \begin{bmatrix} 0 \\ 
1  \\ 
0 \\ \end{bmatrix}, \text{ and } \texttt{2} \Rightarrow \begin{bmatrix} 0 \\ 
0  \\ 
1 \\ \end{bmatrix}. \end{equation}</script>

<p>We initialize the one-hot encoding with a zero matrix with dimension: $891 \times 3$.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pclass_onehot</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">pclass</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">pclass_onehot</span><span class="o">.</span><span class="n">shape</span>
</code></pre></div></div>
<p>Out:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>torch.Size([891, 3])
</code></pre></div></div>
<p><br />
Next, we call <code class="highlighter-rouge">scatter_</code> method. The underscore after the method name means that the method will not return a new tensor; instead, it will modify the tensor in place.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pclass_onehot</span><span class="o">.</span><span class="n">scatter_</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">pclass</span><span class="o">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="mf">1.0</span><span class="p">)</span>
</code></pre></div></div>
<p>Out:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tensor([[0., 0., 1.],
        [1., 0., 0.],
        ...,
        [1., 0., 0.],
        [0., 0., 1.]])
</code></pre></div></div>
<p>The second argument (<code class="highlighter-rouge">pclass.unsqueeze(1)</code>) adds a new dimension to tensor <code class="highlighter-rouge">pclass</code>. Therefore, the dimension of <code class="highlighter-rouge">pclass</code> changes from <code class="highlighter-rouge">torch.Size([891])</code> to <code class="highlighter-rouge">torch.Size([891, 1])</code>. The first argument (<code class="highlighter-rouge">1</code>) states that the axis <code class="highlighter-rouge">1</code> (column) of <code class="highlighter-rouge">pclass</code> that will be expanded from <code class="highlighter-rouge">1</code> into <code class="highlighter-rouge">3</code>. We need to make sure that the column size of <code class="highlighter-rouge">pclass_onehot</code> is the same as the number of unique values in <code class="highlighter-rouge">pclass</code> with each value represents a column index.</p>

<p>We conclude the post by showing that our conversion works well.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pclass</span><span class="p">[:</span><span class="mi">10</span><span class="p">]</span>
</code></pre></div></div>
<p>Out:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

:ET